using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using Core.Models;
using Core.Models.Elements;
using Core.Models.Model;
using Core.Models.Properties;
using Core.Models.Metadata;
using System.Reflection;
using System.Xml.Linq;

namespace ETABS.Core.Export
{
    /// <summary>
    /// Main exporter class for converting JSON building structure to ETABS E2K format
    /// </summary>
    public class E2KExporter
    {
        private readonly Model.GridExporter _gridExporter;
        private readonly Model.LevelExporter _levelExporter;
        private readonly Elements.ColumnExporter _columnExporter;
        private readonly Elements.BeamExporter _beamExporter;
        private readonly Properties.MaterialExporter _materialExporter;
        private readonly Metadata.UnitsExporter _unitsExporter;

        public E2KExporter()
        {
            _gridExporter = new Model.GridExporter();
            _levelExporter = new Model.LevelExporter();
            _columnExporter = new Elements.ColumnExporter();
            _beamExporter = new Elements.BeamExporter();
            _materialExporter = new Properties.MaterialExporter();
            _unitsExporter = new Metadata.UnitsExporter();
        }

        /// <summary>
        /// Exports a building structure model to ETABS E2K format
        /// </summary>
        /// <param name="model">Building structure model</param>
        /// <param name="filePath">Path to save the E2K file</param>
        public void ExportToE2K(Base model, string filePath)
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                // Add E2K file header
                WriteHeader(sb, model.Metadata);

                // Set units
                string unitsSection = _unitsExporter.ConvertToE2K(model.Units);
                sb.AppendLine(unitsSection);
                sb.AppendLine();

                // Export materials (needed before structural elements)
                if (model.Properties != null && model.Properties.Materials.Count > 0)
                {
                    string materialsSection = _materialExporter.ConvertToE2K(model.Properties.Materials);
                    sb.AppendLine(materialsSection);
                    sb.AppendLine();
                }

                // Export grids
                if (model.Model.Grids.Count > 0)
                {
                    string gridSection = _gridExporter.ConvertToE2K(model.Model.Grids);
                    sb.AppendLine(gridSection);
                    sb.AppendLine();
                }

                // Export levels
                if (model.Model.Levels.Count > 0)
                {
                    string levelSection = _levelExporter.ConvertToE2K(model.Model.Levels);
                    sb.AppendLine(levelSection);
                    sb.AppendLine();
                }

                // Export columns
                if (model.Elements.Columns.Count > 0)
                {
                    string columnsSection = _columnExporter.ConvertToE2K(model.Elements.Columns, model.Model.Levels);
                    sb.AppendLine(columnsSection);
                    sb.AppendLine();
                }

                // Export beams
                if (model.Elements.Beams.Count > 0)
                {
                    string beamsSection = _beamExporter.ConvertToE2K(model.Elements.Beams, model.Model.Levels);
                    sb.AppendLine(beamsSection);
                    sb.AppendLine();
                }

                // Write the complete E2K file
                File.WriteAllText(filePath, sb.ToString());
            }
            catch (Exception ex)
            {
                throw new Exception($"Error exporting to E2K format: {ex.Message}", ex);
            }
        }

        private void WriteHeader(StringBuilder sb, Metadata metadata)
        {
            sb.AppendLine("$ ETABS 2019 E2K FILE");
            sb.AppendLine("$ Generated by JSON Connectors (Build: 1.0)");
            sb.AppendLine($"$ Project: {metadata.ProjectName}");
            sb.AppendLine($"$ Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"$ Schema Version: {metadata.SchemaVersion}");
            sb.AppendLine();
            sb.AppendLine("$ PROGRAM CONTROL INFORMATION");
            sb.AppendLine("UNITS KIPS FEET F");  // Default units will be overridden by UnitsExporter
            sb.AppendLine();
        }
    }
}