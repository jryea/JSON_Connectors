using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using Core.Converters;
using Core.Models;
using CM = Core.Models.Metadata;
using CL = Core.Models.ModelLayout;
using Revit.Export.Models;
using Revit.Export.ModelLayout;
using Revit.Export.Elements;
using Revit.Utilities;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

namespace Revit.Export
{
    public class GrasshopperExporter
    {
        private readonly Document _doc;
        private readonly UIApplication _uiApp;
        private BaseModel _model;

        public GrasshopperExporter(Document doc, UIApplication uiApp)
        {
            _doc = doc;
            _uiApp = uiApp;
            _model = new BaseModel();
        }

        // Exports a model to Grasshopper format with floor type to view plan mappings
       
        public void ExportWithFloorTypeViewMappings(
            string jsonPath,
            string dwgFolder,
            List<CL.FloorType> floorTypes,
            List<CL.Level> selectedLevels,
            XYZ referencePoint,
            Dictionary<string, ElementId> floorTypeToViewMap,
            List<ElementId> selectedLevelIds = null)
        {
            try
            {
                // Re-initialize the model
                _model = new BaseModel();

                // Initialize metadata with reference point
                InitializeMetadata(referencePoint);

                // Add floor types
                _model.ModelLayout.FloorTypes = new List<CL.FloorType>();
                if (floorTypes != null && floorTypes.Count > 0)
                {
                    // Use the provided floor types directly
                    _model.ModelLayout.FloorTypes = floorTypes;
                }

                // Add the floor types to the model
                // IDs are already generated by the FloorType constructor
                _model.ModelLayout.FloorTypes = floorTypes;

                // Add the pre-configured levels to the model
                // The FloorTypeId is already set on these levels and references the proper Core.FloorType.Id
                _model.ModelLayout.Levels = selectedLevels;

                // Get selected level names for filtering structural elements
                HashSet<string> selectedLevelNames = new HashSet<string>();
                foreach (var level in selectedLevels)
                {
                    selectedLevelNames.Add(level.Name);
                    Debug.WriteLine($"Including level in export: {level.Name}");
                }

                // Export grids
                ExportGrids();

                // Export structural elements for selected levels only
                ExportStructuralElements(selectedLevelNames);

                // Export CAD plans based on floor type to view mappings
                ExportFloorTypeViews(dwgFolder, floorTypeToViewMap);

                // Save the model to JSON
                JsonConverter.SaveToFile(_model, jsonPath);
                Debug.WriteLine($"Successfully exported model to {jsonPath}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error exporting model: {ex.Message}");
                throw;
            }
        }

        private void InitializeMetadata(XYZ referencePoint = null)
        {
            // Initialize project info
            CM.ProjectInfo projectInfo = new CM.ProjectInfo
            {
                ProjectName = _doc.ProjectInformation?.Name ?? _doc.Title,
                ProjectId = _doc.ProjectInformation?.Number ?? System.Guid.NewGuid().ToString(),
                CreationDate = DateTime.Now,
                SchemaVersion = "1.0"
            };

            // Initialize units
            CM.Units units = new CM.Units
            {
                Length = "inches",
                Force = "pounds",
                Temperature = "fahrenheit"
            };

            // Set the metadata
            _model.Metadata.ProjectInfo = projectInfo;
            _model.Metadata.Units = units;

            // Extract coordinates using the Helpers class
            _model.Metadata.Coordinates = Helpers.ExtractCoordinateSystem(_doc);

            // Add reference point if provided
            if (referencePoint != null)
            {
                // Add reference point to coordinates
                if (_model.Metadata.Coordinates == null)
                {
                    _model.Metadata.Coordinates = new CM.Coordinates();
                }

                // Convert to point in model format (feet to inches)
                _model.Metadata.Coordinates.ProjectBasePoint = new Core.Models.Geometry.Point3D(
                    referencePoint.X * 12.0,
                    referencePoint.Y * 12.0,
                    referencePoint.Z * 12.0
                );

                Debug.WriteLine($"Set reference point: X={referencePoint.X}, Y={referencePoint.Y}, Z={referencePoint.Z}");
            }
        }

        private void ExportGrids()
        {
            try
            {
                // Export grids
                GridExport gridExport = new GridExport(_doc);
                int gridCount = gridExport.Export(_model.ModelLayout.Grids);
                Debug.WriteLine($"Exported {gridCount} grids");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error exporting grids: {ex.Message}");
            }
        }

        private void ExportStructuralElements(HashSet<string> selectedLevelNames)
        {
            try
            {
                // Export floors - filter by level
                FloorExport floorExport = new FloorExport(_doc);
                int floorCount = floorExport.Export(_model.Elements.Floors, _model);
                Debug.WriteLine($"Exported {floorCount} floors");

                // Export columns - filter by level
                ColumnExport columnExport = new ColumnExport(_doc);
                int columnCount = columnExport.Export(_model.Elements.Columns, _model);
                Debug.WriteLine($"Exported {columnCount} columns");

                // Additional structural element exports can be added here
                // E.g., walls, beams, braces, etc.
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error exporting structural elements: {ex.Message}");
            }
        }

        private void ExportFloorTypeViews(string folderPath, Dictionary<string, ElementId> floorTypeToViewMap)
        {
            try
            {
                // Create folder if it doesn't exist
                if (!Directory.Exists(folderPath))
                {
                    Directory.CreateDirectory(folderPath);
                }

                // Skip if no mappings
                if (floorTypeToViewMap == null || floorTypeToViewMap.Count == 0)
                {
                    Debug.WriteLine("No floor type to view mappings provided");
                    return;
                }

                // Set up export options
                DWGExportOptions options = new DWGExportOptions();

                // Track exported views to avoid duplicates
                HashSet<ElementId> exportedViewIds = new HashSet<ElementId>();

                // For each floor type in the model, export its associated view
                foreach (var floorType in _model.ModelLayout.FloorTypes)
                {
                    // Check if we have a view mapping for this floor type
                    if (floorTypeToViewMap.TryGetValue(floorType.Id, out ElementId viewId))
                    {
                        // Skip if already exported
                        if (exportedViewIds.Contains(viewId))
                            continue;

                        // Get the view from the document
                        View view = _doc.GetElement(viewId) as View;
                        if (view == null)
                        {
                            Debug.WriteLine($"View with ID {viewId} not found for floor type {floorType.Name}");
                            continue;
                        }

                        // Create filename based on floor type name
                        string baseFilename = SanitizeFilename($"{floorType.Name}_Plan");

                        try
                        {
                            // Export to DWG using Revit API
                            _doc.Export(folderPath, baseFilename, new List<ElementId> { viewId }, options);

                            // Add to tracked views
                            exportedViewIds.Add(viewId);

                            Debug.WriteLine($"Exported view {view.Name} to {baseFilename}.dwg for floor type {floorType.Name}");
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine($"Error exporting view {view.Name}: {ex.Message}");
                        }
                    }
                    else
                    {
                        Debug.WriteLine($"No view mapping found for floor type {floorType.Name} (ID: {floorType.Id})");
                    }
                }

                Debug.WriteLine($"Exported {exportedViewIds.Count} views to {folderPath}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error exporting floor type views: {ex.Message}");
            }
        }

        private string SanitizeFilename(string filename)
        {
            if (string.IsNullOrEmpty(filename))
                return "unnamed";

            // Remove invalid file system characters
            char[] invalidChars = Path.GetInvalidFileNameChars();
            string sanitized = string.Join("_", filename.Split(invalidChars, StringSplitOptions.RemoveEmptyEntries));

            // Replace common problematic characters
            sanitized = sanitized.Replace(" ", "_")
                               .Replace(".", "_")
                               .Replace(",", "_")
                               .Replace(":", "_");

            // Limit length
            if (sanitized.Length > 100)
                sanitized = sanitized.Substring(0, 100);

            return sanitized.Trim('_');
        }
    }
}